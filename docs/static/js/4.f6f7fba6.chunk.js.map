{"version":3,"sources":["stores/dashboardStore.ts","services/dashboardService.ts","routes/Dashboard/Dashboard.mobile/style.module.scss","routes/Dashboard/Dashboard.mobile/components/DashboardItem/style.module.scss","routes/Dashboard/Dashboard.mobile/components/DashboardItem/index.tsx","routes/Dashboard/Dashboard.mobile/Store.ts","routes/Dashboard/Dashboard.mobile/index.tsx"],"names":["Dashboard","axios","get","then","resp","data","list","loading","observable","module","exports","Index","className","style","item","image","textBlock","React","Component","Store","this","initObservers","observe","dashboardStore","change","type","name","newValue","props","store","map","DashboardItem","dashboard","sidebar","content","renderList","observer"],"mappings":"gLAIMA,G,EAIJ,aAAe,IAAD,8FCJLC,IAAMC,IAAI,oCACZC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,QDKhBF,MAAK,SAAAG,GACF,EAAKA,KAAOA,EACZ,EAAKC,SAAU,M,qCAPzBC,K,yEAA8B,K,kCAC9BA,K,wEAA+B,M,GAYpB,QAAIR,G,mBEjBnBS,EAAOC,QAAU,CAAC,UAAY,yBAAyB,QAAU,uBAAuB,QAAU,yB,mBCAlGD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,MAAQ,uB,+HCWtCC,E,uKAPP,OAAO,yBAAKC,UAAWC,IAAMC,MACzB,yBAAKF,UAAWC,IAAME,QACtB,yBAAKH,UAAWC,IAAMG,iB,GAJdC,IAAMC,W,qCC+BXC,GAzBf,aAIE,aAAe,uFACbC,KAAKC,gBALT,4DAQmB,IAAD,OACdC,YAAQC,KAAgB,SAACC,GACvB,GAAoB,WAAhBA,EAAOC,KAAmB,CAAC,IACtBC,EAAkBF,EAAlBE,KAAMC,EAAYH,EAAZG,SAEA,SAATD,IACF,EAAKpB,KAAOqB,GAGD,YAATD,IACF,EAAKnB,QAAUoB,WAlBzB,uCACGnB,KADH,yEACqBe,IAAejB,QADpC,qCAEGE,KAFH,yEAEwBe,IAAehB,WAFvC,G,OCHMI,E,kDAGF,WAAYiB,GAAa,IAAD,8BACpB,cAAMA,IAHFC,WAEgB,EAGpB,EAAKA,MAAQ,IAAIV,EAHG,E,yDAOV,IAAD,EACiBC,KAAKS,MAAvBvB,EADC,EACDA,KAER,OAHS,EACKC,QAGH,4CAGJD,EAAKwB,KAAI,SAAAhB,GAAI,OAAI,kBAACiB,EAAkBjB,Q,+BAI3C,OAAO,yBAAKF,UAAWC,IAAMmB,WACzB,2BAAOpB,UAAWC,IAAMoB,UACxB,yBAAKrB,UAAWC,IAAMqB,SACjBd,KAAKe,mB,GAxBFlB,IAAMC,WA8BXkB,sBAASzB","file":"static/js/4.f6f7fba6.chunk.js","sourcesContent":["import { observable, action, computed } from 'mobx';\nimport { getData } from '../services/dashboardService';\nimport { BoardData } from '../types/BoardTypes';\n\nclass Dashboard {\n   @observable loading: boolean = true;\n   @observable list: BoardData[] = [];\n\n  constructor() {\n      getData()\n          .then(list => {\n              this.list = list\n              this.loading = false;\n          })\n  }\n\n}\n\nexport default new Dashboard();","import axios from \"axios\";\nimport { BoardData } from \"../types/BoardTypes\";\n\nexport const getData = (): Promise<BoardData[]> => {\n    return axios.get('http://localhost:3001/dashboards')\n        .then(resp => resp.data)\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"style_dashboard__146rz\",\"sidebar\":\"style_sidebar__2lUD9\",\"content\":\"style_content__1JOVK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"style_item__MGnMf\",\"image\":\"style_image__267wq\"};","import React from \"react\";\nimport style from \"./style.module.scss\";\n\nclass Index extends React.Component<any> {\n    render() {\n        return <div className={style.item}>\n            <div className={style.image}/>\n            <div className={style.textBlock}></div>\n        </div>\n    };\n}\n\nexport default Index;","import { observable, action, computed, observe } from 'mobx';\nimport dashboardStore from '../../../stores/dashboardStore';\nimport {BoardData} from \"../../../types/BoardTypes\";\n// import accessRulesStore from \"../../stores/accessRulesStore\";\n\nexport interface IStore {\n  list: BoardData[]\n  loading: boolean\n}\nexport class Store implements IStore{\n  @observable list = dashboardStore.list;\n  @observable loading = dashboardStore.loading;\n\n  constructor() {\n    this.initObservers()\n  }\n\n  initObservers() {\n    observe(dashboardStore, (change) => {\n      if (change.type === \"update\") {\n        const {name, newValue} = change;\n\n        if (name === 'list') {\n          this.list = newValue\n        }\n\n        if (name === 'loading') {\n          this.loading = newValue\n        }\n      }\n    })\n  }\n}\n\nexport default Store;\n","import React from 'react';\nimport style from './style.module.scss';\nimport DashboardItem from './components/DashboardItem';\nimport Store, { IStore } from './Store';\nimport {observer} from \"mobx-react\";\n\nclass Index extends React.Component<any> {\n    private store: IStore;\n\n    constructor(props: any) {\n        super(props);\n\n        this.store = new Store();\n\n    }\n\n    renderList() {\n        const { list, loading } = this.store;\n\n        if (loading) {\n            return <div>Loading....</div>\n        }\n\n        return list.map(item => <DashboardItem {...item} />)\n\n    }\n    render() {\n        return <div className={style.dashboard}>\n            <aside className={style.sidebar}/>\n            <div className={style.content}>\n                {this.renderList()}\n            </div>\n        </div>\n    };\n}\n\nexport default observer(Index);"],"sourceRoot":""}